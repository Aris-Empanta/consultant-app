When a lawyer chooses his available hours, the following restrictions should be applied: 

FRONTEND:
- He can choose 2 intervals maximum during a day.
- There will be 1 interval default. 
- The addIntervals button default should be unclickable.
- The addIntervals button should be clickable only if the there is no interval or if the last interval's ending time is 
  <= 22:59 and the existing intervals are <2. 
- The first(or only) interval's starting time should be >= the current time and <= the ending time of the interval
  minus 1 hour. Its default value will be the current time. 
- The default value of the starting time today will be the current time. if the current time is after 22:59, we 
  delete the current date div.
- The initial value of the newly created interval of the starting time should be the current time if it is the only interval 
- The first(or only) interval's ending time should be >= the starting time plus 1 hour and <= 22:59 or in the case 
  there is a second interval, <= the second interval's starting time. 
- The second interval's(if exist) starting time should be >= the previous interval's ending time, with default value 
  the previous interval's ending time, and <= the current interval's ending time minus 1 hour.
- The second interval's(if exist) ending time should be >= the current interval's starting time plus 1 hour.

BACKEND:
- We have the request body as a dictionary, having the date as a key, and starting/ending hours as values (type list) <----- Ok
- We wont validate the starting time. It will deviate from the current starting time anyway. in any case it will 
  create non valid appointments(valid appointments will be examined based on current time). <----- Ok
- Now we start the comparisons. so we convert all the times to datetime.datetime objects and save them to variables. <----- Ok
- We compare the starting and ending time. The ending time should be greater than starting time by one hour at least. <----- Ok
- In case of 2 intervals, we check that the second interval starting time is later than or equal to the first 
  intervals ending time. In case this doesnt happen, we send an error to the frontend without further processing the data. <----- Ok
-  We also evaluate if the ending time is same as the next starting time. if that is the case, we combine 2 intervals to one. <----- Ok
- We have to save the available hours in the database as a DateTimeField. The columns would be: Id, LawyerId, startingTime, EndingTime. 
- Once the evaluation is done, we save each interval in a database row (an interval is one starting and one ending time).

*** The restrictions above might be extended in the codebase. In any case, sufficient comments are provided***
